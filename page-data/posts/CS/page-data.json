{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/CS","result":{"pageContext":{"currentCategory":"CS","categories":["All","PJT","BOOK","DB","VS","CS"],"edges":[{"node":{"id":"f4896346-c110-59f1-b775-7c43840bd969","excerpt":"SOLID (객체 지향 설계) 시간이 지나도 유지 보수와 확장이 쉬운 시스템을 만들고자 할 때 이 원칙들을 함께 적용 가능 단일 책임 원칙 (SRP; Single Responsiblity Principle) 한 클래스는 하나의 책임만 가지며, 클래스는 그 책임을 완전히 캡슐화 해야한다. 어떤 클래스나 모듈은 변경하려는 단 하나 이유만을 가져야 한다. 개방-폐쇄 원칙 (OCP; Open-Closed Principle) SW의 구성 요소 (모듈, 컴포넌트, 클래스, 메서드)는 확장에는 열려있고 변경에는 닫혀있어야 한다. OCP를 가능하게 하는 중요 매커니즘은 추상화와 다형성이다. 새로운 기능이 추가되는 경우, 기존에 제공하던 클래스(또는 메서드)를 수정하는 것이 아니라 새로운 클래스(또는 메서드)를 추가해서 기능을 확장한다. 리스코프 치환 원칙 (LSP; Liskov Subsitution Principle) 서브 클래스는 언제나 슈퍼 클래스를 대체할 수 있어야 한다. 슈퍼 클래스가 들…","fields":{"slug":"/cs/solid/"},"frontmatter":{"categories":"CS","title":"객체지향 5대 원칙 SOLID","date":"April 07, 2024"}},"next":null,"previous":{"fields":{"slug":"/pjt/diary_0412/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}